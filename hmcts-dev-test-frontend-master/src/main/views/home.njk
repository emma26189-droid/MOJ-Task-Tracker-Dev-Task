{# home.njk #}
{% from "govuk/components/summary-list/macro.njk" import govukSummaryList %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/textarea/macro.njk" import govukTextarea %}
{% from "govuk/components/select/macro.njk" import govukSelect %}
{% from "govuk/components/date-input/macro.njk" import govukDateInput %}
{% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}

{% extends "template.njk" %}

{% block pageTitle %}Task Management System{% endblock %}

{% block content %}
  <div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">

      <h1 class="govuk-heading-xl">Task Management System</h1>

      {% if errors %}
        {{ govukErrorSummary({
          titleText: "There is a problem",
          errorList: errors
        }) }}
      {% endif %}

      <h2 class="govuk-heading-l">Create a new task</h2>

      <form method="POST" action="/tasks" novalidate>
        {{ govukInput({
          label: { text: "Title", classes: "govuk-label--m" },
          id: "title",
          name: "title",
          value: values.title if values and values.title
        }) }}

        {{ govukTextarea({
          label: { text: "Description (optional)", classes: "govuk-label--m" },
          id: "description",
          name: "description",
          value: values.description if values and values.description
        }) }}

        {{ govukSelect({
          label: { text: "Status", classes: "govuk-label--m" },
          id: "status",
          name: "status",
          items: [
            { value: "", text: "Select status" },
            { value: "TO_DO", text: "To do" },
            { value: "IN_PROGRESS", text: "In progress" },
            { value: "COMPLETED", text: "Completed" }
          ]
        }) }}

        {{ govukDateInput({
          id: "due-date",
          namePrefix: "dueDate",
          fieldset: {
            legend: { text: "Due date", classes: "govuk-fieldset__legend--m" }
          },
          hint: { text: "For example, 31 3 2025" },
          items: [
            { name: "day",   value: values["dueDate-day"] },
            { name: "month", value: values["dueDate-month"] },
            { name: "year",  value: values["dueDate-year"] }
          ]
        }) }}

        <div class="govuk-button-group">
          {{ govukButton({ text: "Create task", type: "submit" }) }}
        </div>
      </form>

    </div>
  </div>

  <div class="govuk-grid-row govuk-!-margin-top-6">
    <div class="govuk-grid-column-two-thirds">
      <h2 class="govuk-heading-l">Tasks</h2>

      {% if tasks and tasks.length > 0 %}
        {% for task in tasks %}
          <div class="govuk-!-margin-bottom-6 govuk-!-padding-3" style="border:1px solid #b1b4b6; border-radius:4px;">
            {{ govukSummaryList({
              classes: "govuk-!-margin-bottom-3",
              rows: [
                { key: { text: "Title" }, value: { text: task.title } },
                { key: { text: "Description" }, value: { text: task.description if task.description else "Not provided" } },
                { key: { text: "Status" }, value: { text: task.status | replace("_", " ") | title } },
                { key: { text: "Due date" }, value: { text: task.dueDate | date("d MMMM yyyy") } }
              ]
            }) }}

            <div class="govuk-button-group">
              {{ govukButton({
                text: "Edit task",
                href: "/tasks/" + task.id + "/edit"
              }) }}
              {{ govukButton({
                text: "Change status",
                href: "/tasks/" + task.id + "/status"
              }) }}
              {{ govukButton({
                text: "Delete task",
                classes: "govuk-button--warning",
                href: "/tasks/" + task.id + "/delete",
                attributes: { "data-task-id": task.id }
              }) }}
            </div>
          </div>
        {% endfor %}
      {% else %}
        <p class="govuk-body">No tasks found. Create a new task using the form above.</p>
      {% endif %}
    </div>
  </div>
{% endblock %}

{% block bodyEnd %}
  {{ super() }}
  <script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function() {
      document.querySelectorAll('[data-task-id]').forEach(function(button) {
        button.addEventListener('click', async function(e) {
          e.preventDefault();
          const taskId = e.currentTarget.getAttribute('data-task-id');
          if (confirm('Are you sure you want to delete this task?')) {
            try {
              await fetch(`/api/tasks/${taskId}`, { method: 'DELETE' });
              window.location.reload();
            } catch (error) {
              alert('Error deleting task');
            }
          }
        });
      });
    });
  </script>
{% endblock %}